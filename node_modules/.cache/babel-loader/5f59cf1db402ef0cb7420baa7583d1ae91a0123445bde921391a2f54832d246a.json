{"ast":null,"code":"import _classCallCheck from \"D:/Git/react_weather_app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Git/react_weather_app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ZoneIsAbstractError } from \"./errors.js\";\n\n/**\n * @interface\n */\nvar Zone = /*#__PURE__*/function () {\n  function Zone() {\n    _classCallCheck(this, Zone);\n  }\n  _createClass(Zone, [{\n    key: \"type\",\n    get:\n    /**\n     * The type of zone\n     * @abstract\n     * @type {string}\n     */\n    function get() {\n      throw new ZoneIsAbstractError();\n    }\n\n    /**\n     * The name of this zone.\n     * @abstract\n     * @type {string}\n     */\n  }, {\n    key: \"name\",\n    get: function get() {\n      throw new ZoneIsAbstractError();\n    }\n  }, {\n    key: \"ianaName\",\n    get: function get() {\n      return this.name;\n    }\n\n    /**\n     * Returns whether the offset is known to be fixed for the whole year.\n     * @abstract\n     * @type {boolean}\n     */\n  }, {\n    key: \"isUniversal\",\n    get: function get() {\n      throw new ZoneIsAbstractError();\n    }\n\n    /**\n     * Returns the offset's common name (such as EST) at the specified timestamp\n     * @abstract\n     * @param {number} ts - Epoch milliseconds for which to get the name\n     * @param {Object} opts - Options to affect the format\n     * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n     * @param {string} opts.locale - What locale to return the offset name in.\n     * @return {string}\n     */\n  }, {\n    key: \"offsetName\",\n    value: function offsetName(ts, opts) {\n      throw new ZoneIsAbstractError();\n    }\n\n    /**\n     * Returns the offset's value as a string\n     * @abstract\n     * @param {number} ts - Epoch milliseconds for which to get the offset\n     * @param {string} format - What style of offset to return.\n     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n     * @return {string}\n     */\n  }, {\n    key: \"formatOffset\",\n    value: function formatOffset(ts, format) {\n      throw new ZoneIsAbstractError();\n    }\n\n    /**\n     * Return the offset in minutes for this zone at the specified timestamp.\n     * @abstract\n     * @param {number} ts - Epoch milliseconds for which to compute the offset\n     * @return {number}\n     */\n  }, {\n    key: \"offset\",\n    value: function offset(ts) {\n      throw new ZoneIsAbstractError();\n    }\n\n    /**\n     * Return whether this Zone is equal to another zone\n     * @abstract\n     * @param {Zone} otherZone - the zone to compare\n     * @return {boolean}\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(otherZone) {\n      throw new ZoneIsAbstractError();\n    }\n\n    /**\n     * Return whether this Zone is valid.\n     * @abstract\n     * @type {boolean}\n     */\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      throw new ZoneIsAbstractError();\n    }\n  }]);\n  return Zone;\n}();\nexport { Zone as default };","map":{"version":3,"names":["ZoneIsAbstractError","Zone","name","ts","opts","format","otherZone"],"sources":["D:/Git/react_weather_app/node_modules/luxon/src/zone.js"],"sourcesContent":["import { ZoneIsAbstractError } from \"./errors.js\";\n\n/**\n * @interface\n */\nexport default class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @type {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @type {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  get ianaName() {\n    return this.name;\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @type {boolean}\n   */\n  get isUniversal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.locale - What locale to return the offset name in.\n   * @return {string}\n   */\n  offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's value as a string\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the offset\n   * @param {string} format - What style of offset to return.\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\n   * @return {string}\n   */\n  formatOffset(ts, format) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zone\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @type {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n"],"mappings":";;AAAA,SAASA,mBAAmB,QAAQ,aAAa;;AAEjD;AACA;AACA;AAFA,IAGqBC,IAAI;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IACvB;AACF;AACA;AACA;AACA;IACE,eAAW;MACT,MAAM,IAAID,mBAAmB,EAAE;IACjC;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,KAKA,eAAW;MACT,MAAM,IAAIA,mBAAmB,EAAE;IACjC;EAAC;IAAA;IAAA,KAED,eAAe;MACb,OAAO,IAAI,CAACE,IAAI;IAClB;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,KAKA,eAAkB;MAChB,MAAM,IAAIF,mBAAmB,EAAE;IACjC;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARE;IAAA;IAAA,OASA,oBAAWG,EAAE,EAAEC,IAAI,EAAE;MACnB,MAAM,IAAIJ,mBAAmB,EAAE;IACjC;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAA;IAAA,OAQA,sBAAaG,EAAE,EAAEE,MAAM,EAAE;MACvB,MAAM,IAAIL,mBAAmB,EAAE;IACjC;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,gBAAOG,EAAE,EAAE;MACT,MAAM,IAAIH,mBAAmB,EAAE;IACjC;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,gBAAOM,SAAS,EAAE;MAChB,MAAM,IAAIN,mBAAmB,EAAE;IACjC;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,KAKA,eAAc;MACZ,MAAM,IAAIA,mBAAmB,EAAE;IACjC;EAAC;EAAA;AAAA;AAAA,SApFkBC,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}