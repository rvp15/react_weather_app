{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = '868f1076d62debf814f899677ab246e4';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n//https://api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}\n\nconst getFormattedData = async (city, units) => {\n  const currentWeather = await getCurrentWeather('weather', city);\n  // console.log(currentWeather)\n  const lon = currentWeather.coord.lon;\n  const lat = currentWeather.coord.lat;\n\n  //https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&exclude={part}&appid={API key}\n  const hourlyforcast = await getCurrentWeather('onecall', {\n    lat,\n    lon,\n    exclude: 'current,minutely,alerts',\n    units: units\n  }).then(formatForecast);\n  console.log(hourlyforcast);\n  return {\n    ...hourlyforcast,\n    ...currentWeather\n  };\n};\nconst getCurrentWeather = async (option, city) => {\n  const url = new URL(BASE_URL + '/' + option);\n  url.search = new URLSearchParams({\n    ...city,\n    appid: API_KEY\n  });\n  const response = await fetch(url);\n  return await response.json();\n};\nconst formatForecast = data => {\n  console.log(data);\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n  daily = daily.slice(1, 6).map(item => {\n    return {\n      title: luxonFormatToLocalTime(item.dt, timezone, 'ccc'),\n      temp: item.temp.day,\n      icon: item.weather[0].icon\n    };\n  });\n  hourly = hourly.slice(1, 6).map(item => {\n    return {\n      title: luxonFormatToLocalTime(item.dt, timezone, 'hh:mm a'),\n      temp: item.temp,\n      icon: item.weather[0].icon\n    };\n  });\n  return {\n    timezone,\n    daily,\n    hourly\n  };\n};\nconst luxonFormatToLocalTime = function (secs, zone) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\";\n  return DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n};\nconst iconUrl = code => `https://openweathermap.org/img/wn/${code}@2x.png`;\n// const formatCurrentWeather=(data)=>{\n//    const {\n//     name,dt,\n//     coord:{lat,lon},\n//     main:{feels_like,temp,temp_min,temp_max,humidity,pressure},\n//     wind:{speed},\n//     sys:{country, sunrise,sunset},\n// } =  data\n// const {main,icon,description} = data.weather[0]\n\n// return {name,dt,lat,lon,feels_like,temp,temp_min,temp_max,humidity,pressure,speed,country, sunrise,sunset,main,icon,description}\n// }\n\nexport { iconUrl, luxonFormatToLocalTime };\nexport default getFormattedData;","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getFormattedData","city","units","currentWeather","getCurrentWeather","lon","coord","lat","hourlyforcast","exclude","then","formatForecast","console","log","option","url","URL","search","URLSearchParams","appid","response","fetch","json","data","timezone","daily","hourly","slice","map","item","title","luxonFormatToLocalTime","dt","temp","day","icon","weather","secs","zone","format","fromSeconds","setZone","toFormat","iconUrl","code"],"sources":["D:/Git/react_weather_app/src/apiservices/weatherapi.js"],"sourcesContent":["import { DateTime } from \"luxon\"\r\n\r\nconst API_KEY ='868f1076d62debf814f899677ab246e4'\r\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5'\r\n\r\n//https://api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}\r\n\r\nconst getFormattedData = async (city,units)=>{\r\n    const currentWeather = await getCurrentWeather('weather',city)\r\n    // console.log(currentWeather)\r\n   const lon = currentWeather.coord.lon\r\n const lat = currentWeather.coord.lat\r\n\r\n //https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&exclude={part}&appid={API key}\r\n const hourlyforcast = await getCurrentWeather('onecall', {\r\n    lat,lon,exclude:'current,minutely,alerts',\r\n    units:units\r\n }).then(formatForecast)\r\n console.log(hourlyforcast)\r\n    return {...hourlyforcast,...currentWeather}\r\n}\r\n\r\nconst getCurrentWeather = async (option,city)=>{\r\n    const url = new URL(BASE_URL + '/' + option);\r\n    url.search = new URLSearchParams({...city,appid:API_KEY})\r\n\r\n    const response = await fetch(url);\r\n    return await response.json();\r\n}\r\nconst formatForecast=(data)=>{\r\n    console.log(data)\r\n    let {timezone,daily,hourly} = data\r\n    daily = daily.slice(1,6).map(item=>{\r\n        return {\r\n           title: luxonFormatToLocalTime(item.dt, timezone, 'ccc'),\r\n           temp: item.temp.day,\r\n           icon:item.weather[0].icon\r\n\r\n        }\r\n    })\r\n    hourly = hourly.slice(1,6).map(item=>{\r\n        return {\r\n           title: luxonFormatToLocalTime(item.dt, timezone, 'hh:mm a'),\r\n           temp: item.temp,\r\n           icon:item.weather[0].icon\r\n\r\n        }\r\n    })\r\nreturn {timezone,daily,hourly}\r\n}\r\n\r\n\r\nconst luxonFormatToLocalTime = (secs,zone,format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\")=>DateTime.fromSeconds(secs).setZone(zone).toFormat(format)\r\n\r\nconst iconUrl = (code)=>`https://openweathermap.org/img/wn/${code}@2x.png`\r\n// const formatCurrentWeather=(data)=>{\r\n//    const {\r\n//     name,dt,\r\n//     coord:{lat,lon},\r\n//     main:{feels_like,temp,temp_min,temp_max,humidity,pressure},\r\n//     wind:{speed},\r\n//     sys:{country, sunrise,sunset},\r\n// } =  data\r\n// const {main,icon,description} = data.weather[0]\r\n\r\n// return {name,dt,lat,lon,feels_like,temp,temp_min,temp_max,humidity,pressure,speed,country, sunrise,sunset,main,icon,description}\r\n// }\r\n\r\n\r\nexport{iconUrl,luxonFormatToLocalTime}\r\n\r\nexport default getFormattedData;"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAE,kCAAkC;AACjD,MAAMC,QAAQ,GAAG,yCAAyC;;AAE1D;;AAEA,MAAMC,gBAAgB,GAAG,OAAOC,IAAI,EAACC,KAAK,KAAG;EACzC,MAAMC,cAAc,GAAG,MAAMC,iBAAiB,CAAC,SAAS,EAACH,IAAI,CAAC;EAC9D;EACD,MAAMI,GAAG,GAAGF,cAAc,CAACG,KAAK,CAACD,GAAG;EACtC,MAAME,GAAG,GAAGJ,cAAc,CAACG,KAAK,CAACC,GAAG;;EAEpC;EACA,MAAMC,aAAa,GAAG,MAAMJ,iBAAiB,CAAC,SAAS,EAAE;IACtDG,GAAG;IAACF,GAAG;IAACI,OAAO,EAAC,yBAAyB;IACzCP,KAAK,EAACA;EACT,CAAC,CAAC,CAACQ,IAAI,CAACC,cAAc,CAAC;EACvBC,OAAO,CAACC,GAAG,CAACL,aAAa,CAAC;EACvB,OAAO;IAAC,GAAGA,aAAa;IAAC,GAAGL;EAAc,CAAC;AAC/C,CAAC;AAED,MAAMC,iBAAiB,GAAG,OAAOU,MAAM,EAACb,IAAI,KAAG;EAC3C,MAAMc,GAAG,GAAG,IAAIC,GAAG,CAACjB,QAAQ,GAAG,GAAG,GAAGe,MAAM,CAAC;EAC5CC,GAAG,CAACE,MAAM,GAAG,IAAIC,eAAe,CAAC;IAAC,GAAGjB,IAAI;IAACkB,KAAK,EAACrB;EAAO,CAAC,CAAC;EAEzD,MAAMsB,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,CAAC;EACjC,OAAO,MAAMK,QAAQ,CAACE,IAAI,EAAE;AAChC,CAAC;AACD,MAAMX,cAAc,GAAEY,IAAI,IAAG;EACzBX,OAAO,CAACC,GAAG,CAACU,IAAI,CAAC;EACjB,IAAI;IAACC,QAAQ;IAACC,KAAK;IAACC;EAAM,CAAC,GAAGH,IAAI;EAClCE,KAAK,GAAGA,KAAK,CAACE,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,CAACC,GAAG,CAACC,IAAI,IAAE;IAC/B,OAAO;MACJC,KAAK,EAAEC,sBAAsB,CAACF,IAAI,CAACG,EAAE,EAAER,QAAQ,EAAE,KAAK,CAAC;MACvDS,IAAI,EAAEJ,IAAI,CAACI,IAAI,CAACC,GAAG;MACnBC,IAAI,EAACN,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC,CAACD;IAExB,CAAC;EACL,CAAC,CAAC;EACFT,MAAM,GAAGA,MAAM,CAACC,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,CAACC,GAAG,CAACC,IAAI,IAAE;IACjC,OAAO;MACJC,KAAK,EAAEC,sBAAsB,CAACF,IAAI,CAACG,EAAE,EAAER,QAAQ,EAAE,SAAS,CAAC;MAC3DS,IAAI,EAAEJ,IAAI,CAACI,IAAI;MACfE,IAAI,EAACN,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC,CAACD;IAExB,CAAC;EACL,CAAC,CAAC;EACN,OAAO;IAACX,QAAQ;IAACC,KAAK;IAACC;EAAM,CAAC;AAC9B,CAAC;AAGD,MAAMK,sBAAsB,GAAG,UAACM,IAAI,EAACC,IAAI;EAAA,IAACC,MAAM,uEAAG,2CAA2C;EAAA,OAAG1C,QAAQ,CAAC2C,WAAW,CAACH,IAAI,CAAC,CAACI,OAAO,CAACH,IAAI,CAAC,CAACI,QAAQ,CAACH,MAAM,CAAC;AAAA;AAE1J,MAAMI,OAAO,GAAIC,IAAI,IAAI,qCAAoCA,IAAK,SAAQ;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA,SAAOD,OAAO,EAACZ,sBAAsB;AAErC,eAAe/B,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}