{"ast":null,"code":"import _classCallCheck from \"D:/Git/react_weather_app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Git/react_weather_app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Git/react_weather_app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Git/react_weather_app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { formatOffset as _formatOffset, parseZoneInfo } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\nvar singleton = null;\n\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\nvar SystemZone = /*#__PURE__*/function (_Zone) {\n  _inherits(SystemZone, _Zone);\n  var _super = _createSuper(SystemZone);\n  function SystemZone() {\n    _classCallCheck(this, SystemZone);\n    return _super.apply(this, arguments);\n  }\n  _createClass(SystemZone, [{\n    key: \"type\",\n    get: /** @override **/\n    function get() {\n      return \"system\";\n    }\n\n    /** @override **/\n  }, {\n    key: \"name\",\n    get: function get() {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    }\n\n    /** @override **/\n  }, {\n    key: \"isUniversal\",\n    get: function get() {\n      return false;\n    }\n\n    /** @override **/\n  }, {\n    key: \"offsetName\",\n    value: function offsetName(ts, _ref) {\n      var format = _ref.format,\n        locale = _ref.locale;\n      return parseZoneInfo(ts, format, locale);\n    }\n\n    /** @override **/\n  }, {\n    key: \"formatOffset\",\n    value: function formatOffset(ts, format) {\n      return _formatOffset(this.offset(ts), format);\n    }\n\n    /** @override **/\n  }, {\n    key: \"offset\",\n    value: function offset(ts) {\n      return -new Date(ts).getTimezoneOffset();\n    }\n\n    /** @override **/\n  }, {\n    key: \"equals\",\n    value: function equals(otherZone) {\n      return otherZone.type === \"system\";\n    }\n\n    /** @override **/\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return true;\n    }\n  }], [{\n    key: \"instance\",\n    get:\n    /**\n     * Get a singleton instance of the local zone\n     * @return {SystemZone}\n     */\n    function get() {\n      if (singleton === null) {\n        singleton = new SystemZone();\n      }\n      return singleton;\n    }\n  }]);\n  return SystemZone;\n}(Zone);\nexport { SystemZone as default };","map":{"version":3,"names":["formatOffset","parseZoneInfo","Zone","singleton","SystemZone","Intl","DateTimeFormat","resolvedOptions","timeZone","ts","format","locale","offset","Date","getTimezoneOffset","otherZone","type"],"sources":["D:/Git/react_weather_app/node_modules/luxon/src/zones/systemZone.js"],"sourcesContent":["import { formatOffset, parseZoneInfo } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * Represents the local zone for this JavaScript environment.\n * @implements {Zone}\n */\nexport default class SystemZone extends Zone {\n  /**\n   * Get a singleton instance of the local zone\n   * @return {SystemZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new SystemZone();\n    }\n    return singleton;\n  }\n\n  /** @override **/\n  get type() {\n    return \"system\";\n  }\n\n  /** @override **/\n  get name() {\n    return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"system\";\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n"],"mappings":";;;;AAAA,SAASA,YAAY,IAAZA,aAAY,EAAEC,aAAa,QAAQ,iBAAiB;AAC7D,OAAOC,IAAI,MAAM,YAAY;AAE7B,IAAIC,SAAS,GAAG,IAAI;;AAEpB;AACA;AACA;AACA;AAHA,IAIqBC,UAAU;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,KAY7B;IACA,eAAW;MACT,OAAO,QAAQ;IACjB;;IAEA;EAAA;IAAA;IAAA,KACA,eAAW;MACT,OAAO,IAAIC,IAAI,CAACC,cAAc,EAAE,CAACC,eAAe,EAAE,CAACC,QAAQ;IAC7D;;IAEA;EAAA;IAAA;IAAA,KACA,eAAkB;MAChB,OAAO,KAAK;IACd;;IAEA;EAAA;IAAA;IAAA,OACA,oBAAWC,EAAE,QAAsB;MAAA,IAAlBC,MAAM,QAANA,MAAM;QAAEC,MAAM,QAANA,MAAM;MAC7B,OAAOV,aAAa,CAACQ,EAAE,EAAEC,MAAM,EAAEC,MAAM,CAAC;IAC1C;;IAEA;EAAA;IAAA;IAAA,OACA,sBAAaF,EAAE,EAAEC,MAAM,EAAE;MACvB,OAAOV,aAAY,CAAC,IAAI,CAACY,MAAM,CAACH,EAAE,CAAC,EAAEC,MAAM,CAAC;IAC9C;;IAEA;EAAA;IAAA;IAAA,OACA,gBAAOD,EAAE,EAAE;MACT,OAAO,CAAC,IAAII,IAAI,CAACJ,EAAE,CAAC,CAACK,iBAAiB,EAAE;IAC1C;;IAEA;EAAA;IAAA;IAAA,OACA,gBAAOC,SAAS,EAAE;MAChB,OAAOA,SAAS,CAACC,IAAI,KAAK,QAAQ;IACpC;;IAEA;EAAA;IAAA;IAAA,KACA,eAAc;MACZ,OAAO,IAAI;IACb;EAAC;IAAA;IAAA;IAjDD;AACF;AACA;AACA;IACE,eAAsB;MACpB,IAAIb,SAAS,KAAK,IAAI,EAAE;QACtBA,SAAS,GAAG,IAAIC,UAAU,EAAE;MAC9B;MACA,OAAOD,SAAS;IAClB;EAAC;EAAA;AAAA,EAVqCD,IAAI;AAAA,SAAvBE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}