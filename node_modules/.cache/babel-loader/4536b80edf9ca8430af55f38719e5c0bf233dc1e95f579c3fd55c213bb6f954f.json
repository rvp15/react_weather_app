{"ast":null,"code":"import _classCallCheck from \"D:/Git/react_weather_app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Git/react_weather_app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport SystemZone from \"./zones/systemZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\nvar now = function now() {\n    return Date.now();\n  },\n  defaultZone = \"system\",\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  twoDigitCutoffYear = 60,\n  throwOnInvalid;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nvar Settings = /*#__PURE__*/function () {\n  function Settings() {\n    _classCallCheck(this, Settings);\n  }\n  _createClass(Settings, null, [{\n    key: \"now\",\n    get:\n    /**\n     * Get the callback for returning the current timestamp.\n     * @type {function}\n     */\n    function get() {\n      return now;\n    }\n\n    /**\n     * Set the callback for returning the current timestamp.\n     * The function should return a number, which will be interpreted as an Epoch millisecond count\n     * @type {function}\n     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n     */,\n    set: function set(n) {\n      now = n;\n    }\n\n    /**\n     * Set the default time zone to create DateTimes in. Does not affect existing instances.\n     * Use the value \"system\" to reset this value to the system's time zone.\n     * @type {string}\n     */\n  }, {\n    key: \"defaultZone\",\n    get:\n    /**\n     * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\n     * The default value is the system's time zone (the one set on the machine that runs this code).\n     * @type {Zone}\n     */\n    function get() {\n      return normalizeZone(defaultZone, SystemZone.instance);\n    }\n\n    /**\n     * Get the default locale to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */,\n    set: function set(zone) {\n      defaultZone = zone;\n    }\n  }, {\n    key: \"defaultLocale\",\n    get: function get() {\n      return defaultLocale;\n    }\n\n    /**\n     * Set the default locale to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */,\n    set: function set(locale) {\n      defaultLocale = locale;\n    }\n\n    /**\n     * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n  }, {\n    key: \"defaultNumberingSystem\",\n    get: function get() {\n      return defaultNumberingSystem;\n    }\n\n    /**\n     * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */,\n    set: function set(numberingSystem) {\n      defaultNumberingSystem = numberingSystem;\n    }\n\n    /**\n     * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */\n  }, {\n    key: \"defaultOutputCalendar\",\n    get: function get() {\n      return defaultOutputCalendar;\n    }\n\n    /**\n     * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n     * @type {string}\n     */,\n    set: function set(outputCalendar) {\n      defaultOutputCalendar = outputCalendar;\n    }\n\n    /**\n     * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\n     * @type {number}\n     */\n  }, {\n    key: \"twoDigitCutoffYear\",\n    get: function get() {\n      return twoDigitCutoffYear;\n    }\n\n    /**\n     * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\n     * @type {number}\n     * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpretted as current century\n     * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050\n     * @example Settings.twoDigitCutoffYear = 1950 // interpretted as 50\n     * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpretted as 50\n     */,\n    set: function set(cutoffYear) {\n      twoDigitCutoffYear = cutoffYear % 100;\n    }\n\n    /**\n     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n     * @type {boolean}\n     */\n  }, {\n    key: \"throwOnInvalid\",\n    get: function get() {\n      return throwOnInvalid;\n    }\n\n    /**\n     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n     * @type {boolean}\n     */,\n    set: function set(t) {\n      throwOnInvalid = t;\n    }\n\n    /**\n     * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n     * @return {void}\n     */\n  }, {\n    key: \"resetCaches\",\n    value: function resetCaches() {\n      Locale.resetCache();\n      IANAZone.resetCache();\n    }\n  }]);\n  return Settings;\n}();\nexport { Settings as default };","map":{"version":3,"names":["SystemZone","IANAZone","Locale","normalizeZone","now","Date","defaultZone","defaultLocale","defaultNumberingSystem","defaultOutputCalendar","twoDigitCutoffYear","throwOnInvalid","Settings","n","instance","zone","locale","numberingSystem","outputCalendar","cutoffYear","t","resetCache"],"sources":["D:/Git/react_weather_app/node_modules/luxon/src/settings.js"],"sourcesContent":["import SystemZone from \"./zones/systemZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\n\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nlet now = () => Date.now(),\n  defaultZone = \"system\",\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  twoDigitCutoffYear = 60,\n  throwOnInvalid;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport default class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * Use the value \"system\" to reset this value to the system's time zone.\n   * @type {string}\n   */\n  static set defaultZone(zone) {\n    defaultZone = zone;\n  }\n\n  /**\n   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\n   * The default value is the system's time zone (the one set on the machine that runs this code).\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return normalizeZone(defaultZone, SystemZone.instance);\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\n   * @type {number}\n   */\n  static get twoDigitCutoffYear() {\n    return twoDigitCutoffYear;\n  }\n\n  /**\n   * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\n   * @type {number}\n   * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpretted as current century\n   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050\n   * @example Settings.twoDigitCutoffYear = 1950 // interpretted as 50\n   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpretted as 50\n   */\n  static set twoDigitCutoffYear(cutoffYear) {\n    twoDigitCutoffYear = cutoffYear % 100;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n  }\n}\n"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,MAAM,MAAM,kBAAkB;AAErC,SAASC,aAAa,QAAQ,oBAAoB;AAElD,IAAIC,GAAG,GAAG;IAAA,OAAMC,IAAI,CAACD,GAAG,EAAE;EAAA;EACxBE,WAAW,GAAG,QAAQ;EACtBC,aAAa,GAAG,IAAI;EACpBC,sBAAsB,GAAG,IAAI;EAC7BC,qBAAqB,GAAG,IAAI;EAC5BC,kBAAkB,GAAG,EAAE;EACvBC,cAAc;;AAEhB;AACA;AACA;AAFA,IAGqBC,QAAQ;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAC3B;AACF;AACA;AACA;IACE,eAAiB;MACf,OAAOR,GAAG;IACZ;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA,OANE;IAAA,KAOA,aAAeS,CAAC,EAAE;MAChBT,GAAG,GAAGS,CAAC;IACT;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA;IASA;AACF;AACA;AACA;AACA;IACE,eAAyB;MACvB,OAAOV,aAAa,CAACG,WAAW,EAAEN,UAAU,CAACc,QAAQ,CAAC;IACxD;;IAEA;AACF;AACA;AACA,OAHE;IAAA,KAbA,aAAuBC,IAAI,EAAE;MAC3BT,WAAW,GAAGS,IAAI;IACpB;EAAC;IAAA;IAAA,KAeD,eAA2B;MACzB,OAAOR,aAAa;IACtB;;IAEA;AACF;AACA;AACA,OAHE;IAAA,KAIA,aAAyBS,MAAM,EAAE;MAC/BT,aAAa,GAAGS,MAAM;IACxB;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAAoC;MAClC,OAAOR,sBAAsB;IAC/B;;IAEA;AACF;AACA;AACA,OAHE;IAAA,KAIA,aAAkCS,eAAe,EAAE;MACjDT,sBAAsB,GAAGS,eAAe;IAC1C;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAAmC;MACjC,OAAOR,qBAAqB;IAC9B;;IAEA;AACF;AACA;AACA,OAHE;IAAA,KAIA,aAAiCS,cAAc,EAAE;MAC/CT,qBAAqB,GAAGS,cAAc;IACxC;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAAgC;MAC9B,OAAOR,kBAAkB;IAC3B;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,OAPE;IAAA,KAQA,aAA8BS,UAAU,EAAE;MACxCT,kBAAkB,GAAGS,UAAU,GAAG,GAAG;IACvC;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAA4B;MAC1B,OAAOR,cAAc;IACvB;;IAEA;AACF;AACA;AACA,OAHE;IAAA,KAIA,aAA0BS,CAAC,EAAE;MAC3BT,cAAc,GAAGS,CAAC;IACpB;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,OAIA,uBAAqB;MACnBlB,MAAM,CAACmB,UAAU,EAAE;MACnBpB,QAAQ,CAACoB,UAAU,EAAE;IACvB;EAAC;EAAA;AAAA;AAAA,SAjIkBT,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}